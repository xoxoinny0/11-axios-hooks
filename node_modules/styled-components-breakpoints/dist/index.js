"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMedia = exports.getMediaShorthands = exports.getMixin = exports.mediaRules = exports.getNextMedia = exports.getSmallestMedia = exports.mediaTemplate = exports.ruleTemplate = exports.mediaWidthRule = exports.defaultBreakpoints = void 0;
const styled_components_1 = require("styled-components");
exports.defaultBreakpoints = {
    xxs: 0,
    xs: 320,
    s: 576,
    m: 768,
    l: 992,
    xl: 1200,
};
// Breakpoint
const mediaWidthRule = (rule) => (`${{ minWidth: 'min', maxWidth: 'max' }[rule] || 'min'}-width`);
exports.mediaWidthRule = mediaWidthRule;
const ruleTemplate = (rule, width) => `(${rule}: ${width}px)`;
exports.ruleTemplate = ruleTemplate;
const mediaTemplate = (rules) => (`@media only screen and ${rules}`);
exports.mediaTemplate = mediaTemplate;
const getSmallestMedia = (breakpoints) => {
    const keys = Object.keys(breakpoints);
    return (Number(keys.reduce((acc, key) => {
        if (acc) {
            return acc > breakpoints[key] ? breakpoints[key] : acc;
        }
        return breakpoints[key];
    }, undefined)));
};
exports.getSmallestMedia = getSmallestMedia;
const getNextMedia = (breakpoints, width) => {
    const keys = Object.keys(breakpoints);
    const nextBreakpoint = Number(keys.reduce((acc, key) => {
        const current = breakpoints[key];
        if (acc && width - current <= 0) {
            return width - acc > Math.abs(width - current) || width - acc === 0 ? current : acc;
        }
        return (0, exports.getSmallestMedia)(breakpoints);
    }, undefined));
    if (nextBreakpoint === width) {
        throw new Error(`The breakpoint of value ${nextBreakpoint} is the heighst there is, did you mean to use "[media].minWidth"?`);
    }
    return nextBreakpoint;
};
exports.getNextMedia = getNextMedia;
const mediaRules = (breakpoints, widthKey, rule, boundKey) => {
    const width = breakpoints[widthKey];
    const bound = breakpoints[boundKey];
    let baseWidthRule = (0, exports.mediaWidthRule)(rule);
    let boudWidthRule;
    let baseRule = (0, exports.ruleTemplate)(baseWidthRule, width);
    let boundRule;
    if (bound && width) {
        // Get correct rule based on width relative to bound
        baseWidthRule = (0, exports.mediaWidthRule)(bound <= width ? 'maxWidth' : 'minWidth');
        boudWidthRule = (0, exports.mediaWidthRule)(bound <= width ? 'minWidth' : 'maxWidth');
        baseRule = (0, exports.ruleTemplate)((0, exports.mediaWidthRule)(bound <= width ? 'maxWidth' : 'minWidth'), width);
        boundRule = (0, exports.ruleTemplate)(boudWidthRule, bound);
        return [].concat([baseRule], bound ? [boundRule] : []).join(' and ');
    }
    if (!bound && rule === 'only') {
        // Get correct rule based on width relative to bound
        boudWidthRule = (0, exports.mediaWidthRule)(bound <= width ? 'minWidth' : 'maxWidth');
        boundRule = (0, exports.ruleTemplate)(boudWidthRule, (0, exports.getNextMedia)(breakpoints, width));
    }
    return [].concat([baseRule], boundRule ? [boundRule] : []).join(' and ');
};
exports.mediaRules = mediaRules;
const getMixin = (breakpoints, key, rule = 'minWidth') => (bound) => ((...args) => (0, styled_components_1.css) `
      ${(0, exports.mediaTemplate)((0, exports.mediaRules)(breakpoints, key, rule, bound))}{
        ${(0, styled_components_1.css)(...args)}
      }
    `);
exports.getMixin = getMixin;
const getMediaShorthands = (breakpoints, rule) => (Object.keys(breakpoints).reduce((acc, key) => ({
    ...acc,
    [key]: (0, exports.getMixin)(breakpoints, key, rule)(),
}), {}));
exports.getMediaShorthands = getMediaShorthands;
const getMedia = (breakpoints) => {
    const mediasUp = (0, exports.getMediaShorthands)(breakpoints, 'minWidth');
    const list = Object.keys(breakpoints);
    return ({
        ...mediasUp,
        minWidth: (widthKey) => (0, exports.getMixin)(breakpoints, widthKey, 'minWidth')(),
        maxWidth: (widthKey) => (0, exports.getMixin)(breakpoints, widthKey, 'maxWidth')(),
        only: (widthKey, boundKey) => (0, exports.getMixin)(breakpoints, widthKey, 'only')(boundKey),
        list,
    });
};
exports.getMedia = getMedia;
exports.default = exports.getMedia;
