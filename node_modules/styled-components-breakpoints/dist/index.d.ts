/// <reference types="chai" />
declare type Rule = 'minWidth' | 'maxWidth' | 'only';
export declare type Breakpoints = Record<string, number>;
export declare const defaultBreakpoints: Breakpoints;
export declare const mediaWidthRule: (rule: Rule) => string;
export declare const ruleTemplate: (rule: string, width: number) => string;
export declare const mediaTemplate: (rules: string) => string;
export declare const getSmallestMedia: (breakpoints: Breakpoints) => number;
export declare const getNextMedia: (breakpoints: Breakpoints, width: number) => number;
export declare const mediaRules: (breakpoints: Breakpoints, widthKey: string, rule: Rule, boundKey?: string) => string;
export declare const getMixin: (breakpoints: Breakpoints, key: string, rule?: Rule) => (bound?: string) => (...args: any[]) => any;
export declare const getMediaShorthands: (breakpoints: any, rule: any) => {
    constructor: Function;
    toString(): string;
    toLocaleString(): string;
    valueOf(): Object;
    hasOwnProperty(v: PropertyKey): boolean;
    isPrototypeOf(v: Object): boolean;
    propertyIsEnumerable(v: PropertyKey): boolean;
    should: Chai.Assertion;
};
export declare const getMedia: (breakpoints: Breakpoints) => {
    minWidth: (widthKey: string) => (...args: any[]) => any;
    maxWidth: (widthKey: string) => (...args: any[]) => any;
    only: (widthKey: string, boundKey?: string) => (...args: any[]) => any;
    list: string[];
    constructor: Function;
    toString(): string;
    toLocaleString(): string;
    valueOf(): Object;
    hasOwnProperty(v: PropertyKey): boolean;
    isPrototypeOf(v: Object): boolean;
    propertyIsEnumerable(v: PropertyKey): boolean;
    should: Chai.Assertion;
};
export default getMedia;
//# sourceMappingURL=index.d.ts.map